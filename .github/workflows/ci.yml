name: Security Scan with AI & Slack Notification

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  security_scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Ensures at least one previous commit is available

      - name: Generate Code Diff
        run: |
          git fetch --unshallow || true  # Ensure full commit history
          git diff HEAD^ > code_diff.txt || git diff --staged > code_diff.txt || echo "No diff available" > code_diff.txt
          echo "Code Diff:"
          cat code_diff.txt

      - name: Send Code Diff to AI Agent
        id: security_scan
        run: |
          DIFF_CONTENT=$(jq -Rs . < code_diff.txt)  # Properly escape the diff content
          JSON_PAYLOAD=$(jq -n --arg question "Does this code contain security vulnerabilities?" --arg diff "$DIFF_CONTENT" '{question: $question, diff: $diff}')
          
          echo "Sending payload: $JSON_PAYLOAD"  # Debugging

          RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            https://agentapi.vercel.app/chat)

          echo "$RESPONSE" > ai_response.json
          jq . ai_response.json  # Pretty-print JSON for debugging
          echo "status=$(jq -r '.status // "Error: No status found"' ai_response.json)" >> $GITHUB_ENV

      - name: Display AI Security Scan Report
        run: |
          echo "## üîç AI Security Scan Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìå Code Diff" >> $GITHUB_STEP_SUMMARY
          echo 'diff' >> $GITHUB_STEP_SUMMARY
          cat code_diff.txt >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### ü§ñ AI Analysis" >> $GITHUB_STEP_SUMMARY
          echo 'json' >> $GITHUB_STEP_SUMMARY
          cat ai_response.json >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY

      - name: Take Action Based on AI Decision
        run: |
          if [[ "$status" == "Approve PR: No vulnerabilities found" ]]; then
            echo "‚úÖ No vulnerabilities detected. PR is safe."
          elif [[ "$status" == "Request changes: Minor issue detected" ]]; then
            echo "‚ö†Ô∏è Requesting changes due to minor security issues."
            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"body": "‚ö†Ô∏è Security scan found minor issues. Please review and fix."}' \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments
          elif [[ "$status" == "Block PR: Critical vulnerability found" ]]; then
            echo "üö® Critical vulnerability detected! Blocking PR."
            exit 1
          else
            echo "‚ùå Unknown status from AI. Review manually."
          fi

  send_slack_message:
    runs-on: ubuntu-latest
    needs: security_scan  # S'assure que Slack ne s'ex√©cute qu'apr√®s le scan

    steps:
      - name: V√©rifier si le fichier `ai_response.json` existe
        run: |
          if [ ! -f ai_response.json ]; then
            echo '{"status": "Error", "summary": "No AI response available"}' > ai_response.json
          fi

      - name: Envoyer le message Slack
        run: |
          SLACK_MESSAGE="üîç *AI Security Scan Report*\n"
          SLACK_MESSAGE+="*Status:* $(jq -r '.status // "Unknown"' ai_response.json)\n"
          SLACK_MESSAGE+="*Summary:* $(jq -r '.summary // "No summary provided"' ai_response.json)\n"

          curl -X POST -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
          -H "Content-type: application/json" \
          --data '{
            "channel": "C08EEK2A8EN", 
            "text": "'"$SLACK_MESSAGE"'"
          }' \
          https://slack.com/api/chat.postMessage

